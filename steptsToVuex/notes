095 | Vuex
https://vuex.vuejs.org/
is library to use of state management pattren

vuex is one storage, all components can dealing with storage 

It is like a store and all components can handle it

in traditional:
i have component
App,
CounterInfo: it's contains props 'conter' and show it's vaue,
Info
----------------------------------
095 | start used Vuex

$npm install vuex

create store folder and store.js in it.

in store.js write:
import Vue from 'vue'
import Vuex from 'vuex'


// use vuex as plugin ex Vue.use(plugin name)
Vue.use(Vuex);

//  go create new store 
const store = new Vuex.Store({
  state: {
    counter: 0
  }
})

// export this store
export default store;

###
and in main.js import this store:

import store from './store/store'

new Vue({
  render: h => h(App),
  // add store here
  store
}).$mount('#app')

###
use store instead of [props, event]

in Counter.vue i will change this:

#1
props:['counter']
=--->
computed: {
    counter() {
        return this.$store.state.counter;
    }
},

#2
increase() { this.$emit('increase'); },
=--->
this.$store.state.counter++;

#3
decrease() { this.$emit('decrease'); }
=--->
this.$store.state.counter--;

###

also in CounterInfo.vue i will change this:

props: ['counter']
=--->
computed: {
    counter() {
        return this.$store.state.counter;
    }
},

###
also in App.vue i will change this:

#1 delete
<div id="app">
    <counter :counter="counter"
    v-on:increase="increase"
    v-on:decrease="decrease">
    </counter>

#2 delete
counter: 0

#3 delete
increase(){this.counter++;},
decrease(){this.counter--;}


----------------------------------



