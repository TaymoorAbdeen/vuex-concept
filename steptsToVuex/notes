095 | Vuex
https://vuex.vuejs.org/
is library to use of state management pattren

vuex is one storage, all components can dealing with storage 

It is like a store and all components can handle it

in traditional:
i have component
App,
CounterInfo: it's contains props 'conter' and show it's vaue,
Info
----------------------------------
096 | start used Vuex

$npm install vuex

create store folder and store.js in it.

in store.js write:
import Vue from 'vue'
import Vuex from 'vuex'


// use vuex as plugin ex Vue.use(plugin name)
Vue.use(Vuex);

//  go create new store 
const store = new Vuex.Store({
  state: {
    counter: 0
  }
})

// export this store
export default store;

###
and in main.js import this store:

import store from './store/store'

new Vue({
  render: h => h(App),
  // add store here
  store
}).$mount('#app')

###
use store instead of [props, event]

in Counter.vue i will change this:

#1
props:['counter']
=--->
computed: {
    counter() {
        return this.$store.state.counter;
    }
},

#2
increase() { this.$emit('increase'); },
=--->
this.$store.state.counter++;

#3
decrease() { this.$emit('decrease'); }
=--->
this.$store.state.counter--;

###

also in CounterInfo.vue i will change this:

props: ['counter']
=--->
computed: {
    counter() {
        return this.$store.state.counter;
    }
},

###
also in App.vue i will change this:

#1 delete
<div id="app">
    <counter :counter="counter"
    v-on:increase="increase"
    v-on:decrease="decrease">
    </counter>

#2 delete
counter: 0

#3 delete
increase(){this.counter++;},
decrease(){this.counter--;}

###
also in Info.vue i will change this:

#1
<counter-info :counter="counter"></counter-info>
=--->
<counter-info></counter-info>

#2 delete
props: ['counter'],
----------------------------------
097 | Vuex Getters
Getters as state, but used with as method,


in store.js i will create getters:
getters: {
    doubledCounter(state) {
        return state.counter *2;
    }
}

###

use this getters in counter vue.js
computed: {
    doubledCounter() {
        return this.$store.getters.doubledCounter;
    }
},

###

passing parametters

#1 in store.js add this method
multiCounter: (state) => (yourNumber) => {
    return state.counter * yourNumber;
}

multiCounter: (state) => (yourNumber) => {
    return state.counter * yourNumber;
}

#2 in counter.vue call with number (3)
multiCounter() {
    return this.$store.getters.multiCounter(3);
}

###

in counter.vue we see there are a lot of function computed,
i will create map getters for abbreviation:

in store.js i will create many getters:
doubledCounter(state) {
    return state.counter *2;
},
ThirdCounter: (state) => {
    return state.counter * 3;
},
fourthCounter: (state) => {
    return state.counter * 4;
}

###
in counter.vue iwill import:
import { mapGetters } from 'vuex'

and create map for getters:
...mapGetters([
"doubledCounter", "ThirdCounter", "fourthCounter",]),

and this three dots (...)
is convert same key and info object is javascrip
----------------------------------

098  | vuex mutations

change in state from component by methods as:
methods:{
    increase() { this.$store.state.counter++; },
    decrease() { this.$store.state.counter--; },
}
this method not true 100%.

For recomended way and true 100% to edit states value,
is use mutations.

mutations same getters,
but getters responsible on read,
while mutations responsible on edit.

create mutations in store.js:
mutations: {
    increase(state) {state.counter++;},
    decrease(state) {state.counter--;}
}

###

and in counter component dealing with state,
by using commit:

methods: {
    increase() {this.$store.state.counter++;},
    decrease() {this.$store.state.counter--;}
},
=--->
methods: {
    increase() {this.$store.commit('increase');},
    decrease() {this.$store.commit('decrease');}
},

###

passing params to mutations:

#in store.js:
mutations: {
    nIncrease(state, n) {
        state.counter += n;
    },
}

#in counter component the param is 5:
nIncrease() {this.$store.commit('nIncrease', 5);},
add this button:
<button @click="nIncrease">N Increase</button>

##

passing parametters as object:

#in counter component the param is 5:
nIncrease() {this.$store.commit('nIncrease', {
    num: 5,
});
},

#in store.js:
mutations: {
    nIncrease(state, payload) {
        state.counter += payload.num;
    },
}



###

create mapMutations:
mapMutations same mapGetters.

in counter component in methods:
increase() {this.$store.commit('increase');},
decrease() {this.$store.commit('decrease');},
=--->
...mapMutations(['increase', 'decrease']),
----------------------------------

099 | vuex DevTools
you can use dev tool to see change to vuex values
----------------------------------

100 | vuex actoions
----------------------------------

100 | vuex actoions
actoions same mutations,
mutations is work to edit state,
actoions is work to commit to mutations,
actoions layer id higher than the mutations.


action goals:
actoions can work alot of mutations,
actoions used to send ajax if success we create mutations,
it's (sync).

in store.js i will add action:
actions: {
    increaseAfterOneSecond(context) {
      setTimeout(function() {
        context.commit('increase')
      }, 1000);
    },
}

# if you use commit only from context use {commit} as;
actions: {
    increaseAfterOneSecond({commit}) {
        setTimeout(function() {
        commit('increase')
        }, 1000);
    },
    
}


in counter component i use action:

#add button:
<button 
@click="increase_after_one_second">
Increase afer 1 second
</button>

#add methods:
increase_after_one_second(){
// The dispatch continued to actions
this.$store.dispatch(increaseAfterOneSecond);
---------------------------------

101 | vuex modules

modules is create you model in store,
also you model contains state, getters, mutations
and actionsm

steps:

#1 create module likesMoudle
const likesMoudle = {
  state:{
    liked: false,
    likes: 10
  },
  getters:{
    likes(state) {
      return state.likes;
    },
    liked(state) {
      return state.liked;
    },
  },
  mutations:{
    toggleLike(state){
      state.liked = ! state.liked;
    },
    increaseLike(state){
      state.likes++;
    },
    decreaseLike(state){
      state.likes--;
    }
  },
  actions:{
      toggleLike(context){
      
      setTimeout(() => {
        
        context.commit('toggleLike')
        if(context.state.liked){
          context.commit('increaseLike');
        } else {
          context.commit('decreaseLike')
        }

      }, 1000);

    }
  },
}


#2 inclue this module in store
modules:{
    likes: likesMoudle
}

#3 use this module with Like component:
<template>
  <div>
    <div>Likes: {{likes}}</div>
    <button v-if="liked" @click="toggleLike">Dislike</button>
    <button v-if="! liked" @click="toggleLike">Like</button>
  </div>
</template>
<script>
import { mapGetters } from 'vuex'
export default {
    computed: {
        ...mapGetters(["likes", "liked"]),
    },
    methods: {
        toggleLike(){
            this.$store.dispatch('toggleLike');
        }
    },
}
</script>

#4 use this component in App.vue:
    
##1 <like></like>
##2 import Like from './components/Like'
##3 components: {Like}

###

speread this module:

#1 create likesMoudle.js in store folder:
const likesMoudle = {
  state:{
    liked: false,
    likes: 10
  },
  getters:{
    likes(state) {
      return state.likes;
    },
    liked(state) {
      return state.liked;
    },
  },
  mutations:{
    toggleLike(state){
      state.liked = ! state.liked;
    },
    increaseLike(state){
      state.likes++;
    },
    decreaseLike(state){
      state.likes--;
    }
  },
  actions:{
      toggleLike(context){
      
      setTimeout(() => {
        
        context.commit('toggleLike')
        if(context.state.liked){
          context.commit('increaseLike');
        } else {
          context.commit('decreaseLike')
        }

      }, 1000);

    }
  },
}
// export
export default likesMoudle;

#2 use likesMoudle in store.js:

##1 import likesMoudle from './likesMoudle'

##2 modules:{
  likes: likesMoudle
}
---------------------------------

102 | vuex modules localState & rootState

localState is exist in store,
rootState is exist in module

rootState contains all modules state,
and from rootState you can accsess to localState.

 if you want to accsess to rootState from module,
 you can use rootState as:
 likes(state, getters, rootState)
